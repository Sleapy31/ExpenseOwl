//go:build ignore
// +build ignore

// Generates internal/config/currencies_gen.go from the local
// assets/currencies_simplified.json file (no network required).

package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"os"
	"sort"
	"strings"
	"text/template"
)

const (
	srcFile = "internal/web/templates/worldCurrenciesV2.json"
	outFile = "internal/storage/currencies.go"
)

// Slim is the structure of each entry in currencies_simplified.json
type Currency struct {
	Code         string `json:"code"`
	Symbol       string `json:"symbol"`
	Name         string `json:"name"`
	Decimals     uint8  `json:"decimals"`
	CommaDecimal bool   `json:"commaDecimal"`
}

// -------------------------------------------------------------------
// Template for the generated Go source
// -------------------------------------------------------------------
var genTmpl = template.Must(template.New("curr").
	Funcs(template.FuncMap{"lower": strings.ToLower}).
	Parse(`// Code generated by go generate; DO NOT EDIT.
package storage

// CurrencyCatalog maps ISO-4217 codes to their symbol.
// The comment preserves the human-readable currency name.
var currencyCatalog = map[string]string{
{{- range . }}
	"{{ .Code }}": "{{ .Symbol }}", // {{ .Name }}
{{- end }}
}

// SupportedCurrencies is a sorted slice of lower-case ISO codes
// (handy for validation and for populating UI dropdowns).
var supportedCurrencies = []string{
{{- range . }}
	"{{ lower .Code }}",
{{- end }}
}
`))

// -------------------------------------------------------------------

func main() {
	raw, err := os.ReadFile(srcFile)
	check(err)

	var currencies []Currency
	check(json.Unmarshal(raw, &currencies))

	// Ensure consistent ordering
	sort.Slice(currencies, func(i, j int) bool { return currencies[i].Code < currencies[j].Code })

	var buf bytes.Buffer
	check(genTmpl.Execute(&buf, currencies))

	check(os.WriteFile(outFile, buf.Bytes(), 0o644))
	fmt.Printf("ðŸŽ‰  Generated %d currencies â†’ %s\n", len(currencies), outFile)
}

func check(err error) {
	if err != nil {
		panic(err)
	}
}
